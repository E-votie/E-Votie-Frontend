// Main class for Election Management System
public class ElectionManagementSystem {

    public static void main(String[] args) {
        System.out.println("Welcome to the Election Management System");

        // Initialize election data
        Election election = new Election("Presidential Election 2024", "2024-11-03");

        // Add candidates
        election.addCandidate(new Candidate("John Doe", "Party A"));
        election.addCandidate(new Candidate("Jane Smith", "Party B"));

        // Register voters
        election.registerVoter(new Voter("Alice", 101));
        election.registerVoter(new Voter("Bob", 102));

        // Cast votes
        election.castVote(101, "John Doe");
        election.castVote(102, "Jane Smith");

        // Display results
        election.displayResults();
    }
}

// Election class to handle election details and actions
class Election {
    private String name;
    private String date;
    private List<Candidate> candidates = new ArrayList<>();
    private List<Voter> voters = new ArrayList<>();
    private Map<String, Integer> votes = new HashMap<>();

    public Election(String name, String date) {
        this.name = name;
        this.date = date;
    }

    public void addCandidate(Candidate candidate) {
        candidates.add(candidate);
        votes.put(candidate.getName(), 0); // Initialize vote count
    }

    public void registerVoter(Voter voter) {
        voters.add(voter);
    }

    public void castVote(int voterId, String candidateName) {
        if (isValidVoter(voterId) && votes.containsKey(candidateName)) {
            votes.put(candidateName, votes.get(candidateName) + 1);
            System.out.println("Vote cast for " + candidateName);
        } else {
            System.out.println("Invalid vote attempt!");
        }
    }

    private boolean isValidVoter(int voterId) {
        for (Voter voter : voters) {
            if (voter.getId() == voterId) {
                return true;
            }
        }
        return false;
    }

    public void displayResults() {
        System.out.println("\nElection Results:");
        for (Map.Entry<String, Integer> entry : votes.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue() + " votes");
        }
    }
}

// Candidate class to represent a candidate
class Candidate {
    private String name;
    private String party;

    public Candidate(String name, String party) {
        this.name = name;
        this.party = party;
    }

    public String getName() {
        return name;
    }

    public String getParty() {
        return party;
    }
}

// Voter class to represent a voter
class Voter {
    private String name;
    private int id;

    public Voter(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

//new line